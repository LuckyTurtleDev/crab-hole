name: Rust

on:
  push:
  pull_request:
  release:
    types: [released]

jobs:

  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        id: "rust-toolchain"
      - name: install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: "${{runner.os}} Rust check ${{steps.rust-toolchain.outputs.cachekey}} Lock ${{hashFiles('Cargo.lock')}}"
      - run: cargo hack check --feature-powerset --at-least-one-of aws-lc-rs,ring --locked
        env:
          RUST_BACKTRACE: 1

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update -y && sudo apt-get install -y knot-dnsutils
      - uses: dtolnay/rust-toolchain@stable
        id: "rust-toolchain"
      - name: install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: "${{runner.os}} Rust test ${{steps.rust-toolchain.outputs.cachekey}} Lock ${{hashFiles('Cargo.lock')}}"
      - run: cargo hack test --feature-powerset --at-least-one-of aws-lc-rs,ring --mutually-exclusive-features aws-lc-rs,ring --skip __debug_parser,default,native-roots,webpki-roots --locked -- --include-ignored
        env:
          RUST_BACKTRACE: 1

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check

  benchmark:
    needs: [check]
    name: bench
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: "${{runner.os}} Rust Bench ${{steps.rust-toolchain.outputs.cachekey}} Lock ${{hashFiles('Cargo.lock')}}"
      - name: Run benchmark
        run: cargo +nightly bench

  cargo_publish:
    if: ${{ github.event_name == 'release' }}
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: msrd0/cargo-publish-action@v1
        with: 
          packages: crab-hole
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  
  cross_build:
    strategy:
      fail-fast: false
      matrix:
        target: 
          - aarch64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - arm-unknown-linux-musleabihf
          - armv7-unknown-linux-musleabihf
          - i686-unknown-linux-musl
          - x86_64-pc-windows-gnu
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
        roots: [native-roots, webpki-roots]
    name: ${{ matrix.target }}--${{ matrix.roots }}
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
        id: "rust-toolchain"
      - name: install cargo-auditable
        uses: taiki-e/install-action@cargo-auditable
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: "${{runner.os}} Target ${{ matrix.target }} Rust ${{steps.rust-toolchain.outputs.cachekey}} Lock ${{hashFiles('Cargo.lock')}}"
      - name: Build crab-hole
        run: |
          sudo apt update -y
          sudo apt install -y --no-install-recommends bindgen
          envs=("RUST_BACKTRACE=1" "CARGO_PROFILE_RELEASE_LTO=true")
          if [[ "${{ matrix.target }}" == *windows* ]]
          then
            sudo apt install -y --no-install-recommends mingw-w64 nasm
          else
            if [[ "${{ matrix.target }}" == *musl* ]]
            then
              sudo apt install -y --no-install-recommends musl-dev
            fi
            envs+=("CC=clang")
            envs+=("CC_${{ matrix.target }}=clang -target ${{ matrix.target }}")
            envs+=("CXX=clang++")
            envs+=("CXX_${{ matrix.target }}=clang++ -target ${{ matrix.target }}")
          fi
          env "${envs[@]}" \
          cargo auditable build --release --locked --no-default-features --features aws-lc-rs,${{ matrix.roots }} --target ${{ matrix.target }}
          tree
        shell: bash --noprofile --norc -exo pipefail {0}
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.target }}--${{ matrix.roots }}"
          path: |
            target/${{ matrix.target }}/release/crab-hole
            target/${{ matrix.target }}/release/crab-hole.exe
  
  build_x86_64-apple-darwin:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        roots: [native-roots, webpki-roots]
    name: x86_64-apple-darwin--${{ matrix.roots }}
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        id: "rust-toolchain"
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: "${{runner.os}} Rust ${{steps.rust-toolchain.outputs.cachekey}} Lock ${{hashFiles('Cargo.lock')}}"
      - run: cargo build --release --all-features
        env:
          RUST_BACKTRACE: 1
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: "x86_64-apple-darwin--${{ matrix.roots }}"
          path: target/release/crab-hole
  
  docker:
    runs-on: ubuntu-latest
    needs: [cross_build]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        path: github_artifacts
    - name: docker
      uses: LuckyTurtleDev/easy-docker-action@main
      with:
        ghcr_password: ${{ secrets.GITHUB_TOKEN }}
        platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8
        max_parallelism: 1
  
  github_publish:
    runs-on: ubuntu-latest
    needs: [cross_build]
    if: ${{ github.event_name == 'release' }}
    steps:
    - name: Checkout repository #needed to get github.event.release.tag_name 
      uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        path: github_artifacts
    - name: Upload Release Artifacts
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_NAME: ${{ github.event.release.tag_name }}
      run: |
        for dir in github_artifacts/*; do
          dir=${dir#github_artifacts/}
          cd github_artifacts
          zip -r ${dir}.zip ${dir}
          gh release upload ${RELEASE_NAME} ${dir}.zip
          rm ${dir}.zip
          cd ..
        done
